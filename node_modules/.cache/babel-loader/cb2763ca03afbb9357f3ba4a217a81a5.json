{"ast":null,"code":"import _classCallCheck from \"/Users/liberatone/Dropbox/bootcamp_2018/Assignments/clicky-game/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/liberatone/Dropbox/bootcamp_2018/Assignments/clicky-game/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/liberatone/Dropbox/bootcamp_2018/Assignments/clicky-game/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/liberatone/Dropbox/bootcamp_2018/Assignments/clicky-game/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/liberatone/Dropbox/bootcamp_2018/Assignments/clicky-game/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/liberatone/Dropbox/bootcamp_2018/Assignments/clicky-game/src/App.js\";\nimport React, { Component } from 'react';\nimport characters from './characters.json';\nimport Wrapper from './components/Wrapper';\nimport MarioCard from './components/MarioCard';\nimport { Jumbotron, Button } from 'reactstrap';\nimport './App.css';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      currentScore: 0,\n      topScore: 0,\n      message: \"Click an image to begin.\",\n      characters: characters,\n      unselectedCharacters: characters\n    };\n\n    _this.shuffleArray = function (array) {\n      for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n      }\n\n      ;\n    };\n\n    _this.handleButtonClick = function (event) {\n      event.preventDefault();\n\n      _this.setState({\n        currentScore: 0,\n        topScore: 0,\n        message: \"Click an image to begin.\",\n        allCharacters: characters,\n        unselectedCharacters: characters\n      });\n    };\n\n    _this.selectCharacter = function (selectCharName) {\n      //Using array.find function to find the first element in unselectedCharacters array that sattisfies the condition\n      //if no character matched then findCharacter will equals to undefined\n      var findCharacter = _this.state.unselectedCharacters.find(function (char) {\n        return char.charName === selectCharName;\n      }); //If no character found in the unselectedCharacters array\n      //Then setState for State properties: topScore will be replaced with currentScore if currentScore is higher than topScore\n      //and start new game\n\n\n      if (findCharacter === undefined) {\n        _this.setState({\n          message: \"You guessed incorrectly!\",\n          topScore: _this.state.currentScore > _this.state.topScore ? _this.state.currentScore : _this.state.topScore,\n          currentScore: 0,\n          allCharacters: characters,\n          unselectedCharacters: characters\n        });\n      } //If character is found in the unselectedCharacters array\n      //Then use array.filter to create a new array (newunselectedCharacters)\n      else {\n          var newUnselectedCharacters = _this.state.unselectedCharacters.filter(function (char) {\n            return char.charName !== selectCharName;\n          });\n\n          _this.setState({\n            message: \"You guessed correctly!\",\n            currentScore: _this.state.currentScore + 1,\n            allCharacters: characters,\n            unselectedCharacters: newUnselectedCharacters\n          });\n        }\n\n      ; //End else\n      //Invoke shuffleArray to shuffle images array\n\n      _this.shuffleArray(characters);\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    //End if\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(Jumbotron, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"App-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \"Mario Memory Challenge Game\"), React.createElement(\"p\", {\n        className: \"message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \"+++++++++++++++++++++++++++++++\"), React.createElement(\"p\", {\n        className: \"message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, this.state.message), React.createElement(\"p\", {\n        className: \"message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"Current Score: \", this.state.currentScore), React.createElement(\"p\", {\n        className: \"message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, \"Top Score: \", this.state.topScore), React.createElement(Button, {\n        color: \"danger\",\n        onClick: this.handleButtonClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"Start Over \"))), React.createElement(Wrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, //map function iterates thru characters array and displays individual image\n      //and pass to MarioCard with key, character, charImage, currentScore and function selectCharacter \n      this.state.characters.map(function (character) {\n        return React.createElement(MarioCard, {\n          key: character.id,\n          charName: character.charName,\n          image: character.image,\n          currentScore: _this2.state.currentScore,\n          selectCharacter: _this2.selectCharacter,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\n;\nexport default App;","map":{"version":3,"sources":["/Users/liberatone/Dropbox/bootcamp_2018/Assignments/clicky-game/src/App.js"],"names":["React","Component","characters","Wrapper","MarioCard","Jumbotron","Button","App","state","currentScore","topScore","message","unselectedCharacters","shuffleArray","array","i","length","j","Math","floor","random","temp","handleButtonClick","event","preventDefault","setState","allCharacters","selectCharacter","selectCharName","findCharacter","find","char","charName","undefined","newUnselectedCharacters","filter","map","character","id","image"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport characters from './characters.json';\nimport Wrapper from './components/Wrapper';\nimport MarioCard from './components/MarioCard';\nimport { Jumbotron , Button } from 'reactstrap';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    currentScore: 0,\n    topScore: 0,\n    message: \"Click an image to begin.\",\n    characters: characters,\n    unselectedCharacters: characters\n  };\n\n  //Shuffle Array function\n  shuffleArray = array => {\n      for (let i = array.length - 1; i > 0; i--) {\n          let j = Math.floor(Math.random() * (i + 1));\n          let temp = array[i];\n          array[i] = array[j];\n          array[j] = temp;\n      };\n  };\n\n  //Function to reset State to initial state on click\n  handleButtonClick = event => {\n      event.preventDefault();\n      this.setState({\n        currentScore: 0,\n        topScore: 0,\n        message: \"Click an image to begin.\",\n        allCharacters: characters,\n        unselectedCharacters: characters\n      });\n  };\n\n  //selectCharacter is called by onClick event in MarioCard.js\n  //and receives character parameter\n  selectCharacter = selectCharName => {\n    //Using array.find function to find the first element in unselectedCharacters array that sattisfies the condition\n    //if no character matched then findCharacter will equals to undefined\n    const findCharacter = this.state.unselectedCharacters.find(char => char.charName === selectCharName);\n\n    //If no character found in the unselectedCharacters array\n    //Then setState for State properties: topScore will be replaced with currentScore if currentScore is higher than topScore\n    //and start new game\n    if (findCharacter === undefined) {\n        this.setState({\n            message: \"You guessed incorrectly!\",\n            topScore: (this.state.currentScore > this.state.topScore) ? this.state.currentScore : this.state.topScore,\n            currentScore: 0,\n            allCharacters: characters,\n            unselectedCharacters: characters\n        });\n    }\n    //If character is found in the unselectedCharacters array\n    //Then use array.filter to create a new array (newunselectedCharacters)\n    else {\n        const newUnselectedCharacters = this.state.unselectedCharacters.filter(char => char.charName !== selectCharName);\n\n        this.setState({\n            message: \"You guessed correctly!\",\n            currentScore: this.state.currentScore + 1,\n            allCharacters: characters,\n            unselectedCharacters: newUnselectedCharacters\n        });\n    };//End else\n\n    //Invoke shuffleArray to shuffle images array\n    this.shuffleArray(characters);\n  };//End if\n\n  render() {\n    return (\n      <div>           \n        <div className=\"App\">\n            <Jumbotron>\n                <h2 className=\"App-title\">Mario Memory Challenge Game</h2>\n                <p className=\"message\">+++++++++++++++++++++++++++++++</p>\n                <p className=\"message\">{this.state.message}</p>\n                <p className=\"message\">Current Score: {this.state.currentScore}</p>\n                <p className=\"message\">Top Score: {this.state.topScore}</p>\n                <Button color=\"danger\" onClick={this.handleButtonClick}>Start Over </Button>\n            </Jumbotron>\n        </div>\n        <Wrapper>\n            {\n              //map function iterates thru characters array and displays individual image\n              //and pass to MarioCard with key, character, charImage, currentScore and function selectCharacter \n              this.state.characters.map(character => (\n                  <MarioCard \n                      key={character.id}\n                      charName = {character.charName}\n                      image = {character.image}\n                      currentScore = {this.state.currentScore}\n                      selectCharacter = {this.selectCharacter}\n                  />\n              ))\n            }\n      </Wrapper>\n      </div>\n    );\n  };\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}